The old style of parser text games, like Zork, relies on the user entering commands into a console. Like "place object in container".
The primary benefit of this syntax is to hide objects and make the user think about where he expects them to be, like a hidden object game. But in most cases, hiding things is not a benefit, but a source of frustration. Hidden details are a primary reason for users to ragequit, and justifiably so. Even experienced players playing well-written games have issues with text commands (example, Spider and Web: http://www.allthingsjacq.com/intfic_clubfloyd_20080904.html). There's always a wrangle between what the user expects is possible, what the author supports, and what the user needs to do.

The new style of text games, like Twine, reveals all the hidden commands and choices as links. This solves that wrangle because the possibilities are now clear to both the author and user.
Everything possible with the old style is still possible with links. If the player wants to "look at painting", then the room text already describes a painting (how else would he know about the painting?), so the word "painting" that already exists can be turned into a link "[p]ainting". Now the player can click on the painting or type "lp". If the painting needs further interaction depth, the player can then be presented with the choice of whether to push the painting, take the painting, eat the painting, talk to the painting, or something else.
Since there aren't obscure input commands to worry about, you can deliver more content. Corner cases take time to write, and most users won't see them.
Hidden-object games are still possible by unstyling the links to make them identical to text. Then the user clicks on a word if he expects it to be relevant.
Nowadays, the audience for "place object in container" games is small, and experienced players are few. Twine has cannibalized this audience by proving itself a better format.